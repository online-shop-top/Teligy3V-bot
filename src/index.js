export default {
  async fetch(request, env) {
    if (request.method === "OPTIONS") {
      return new Response(null, {
        headers: { "Access-Control-Allow-Origin": "*" },
      });
    }

    if (request.method !== "POST") {
      return new Response("Method Not Allowed", { status: 405 });
    }

    const update = await request.json();

    async function sendMessage(chatId, text, reply_markup = null) {
      const body = { chat_id: chatId, text };
      if (reply_markup) body.reply_markup = reply_markup;
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
    }

    const userId =
      update.message?.from?.id ||
      update.callback_query?.from?.id ||
      update.chat_member?.new_chat_member?.user?.id;
    if (!userId) return new Response("OK");

    const recipientId = userId;

    // –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä—É–ø–∏
    if (
      update.chat_member &&
      update.chat_member.new_chat_member &&
      update.chat_member.new_chat_member.status === "member"
    ) {
      const newUserId = update.chat_member.new_chat_member.user.id;

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
      await env.Teligy3V.put(`joined_at:${newUserId}`, Date.now().toString());
      await env.Teligy3V.put(`state:${newUserId}`, JSON.stringify({ step: "not_registered" }));

      // –û–±–º–µ–∂—É—î–º–æ –ø—Ä–∞–≤–∞ –Ω–æ–≤–∞—á–∫–∞
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/restrictChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: env.GROUP_CHAT_ID,
          user_id: newUserId,
          permissions: { can_send_messages: false, can_add_web_page_previews: false },
        }),
      });

      return new Response("OK");
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await env.Teligy3V.put(`last_active:${userId}`, Date.now().toString());

    let userStateRaw = await env.Teligy3V.get(`state:${userId}`);
    let userState = null;
    try {
      userState = userStateRaw ? JSON.parse(userStateRaw) : null;
    } catch {
      userState = null;
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (update.message?.text === "/start") {
      const firstName = update.message.from.first_name || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";
      await sendMessage(
        recipientId,
        `üëã –ü—Ä–∏–≤—ñ—Ç, ${firstName}!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏.`,
        { inline_keyboard: [[{ text: "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨", callback_data: "join_request" }]] }
      );
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_join" }));
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ join_request
    if (update.callback_query?.data === "join_request") {
      const rulesText = `–ü–†–ê–í–ò–õ–ê –ß–ê–¢–£ ...`;
      await sendMessage(recipientId, rulesText, {
        inline_keyboard: [[{ text: "–ü–û–ì–û–î–ñ–£–Æ–°–¨", callback_data: "rules_accept" }]],
      });
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_rules_accept" }));
      return new Response("OK");
    }

    if (update.callback_query?.data === "rules_accept") {
      await sendMessage(recipientId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏.");
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_apartment" }));
      return new Response("OK");
    }

    if (userState?.step === "awaiting_apartment" && update.message?.text) {
      const aptNum = parseInt(update.message.text.trim(), 10);
      if (isNaN(aptNum) || aptNum < 1 || aptNum > 120) {
        await sendMessage(recipientId, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      } else {
        let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];
        if (registered.length >= 2) {
          await sendMessage(recipientId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º—É–º.");
          await env.Teligy3V.delete(`state:${userId}`);
          await env.Teligy3V.delete(`joined_at:${userId}`);
        } else {
          await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_details", apartment: aptNum }));
          await sendMessage(recipientId, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É.");
        }
      }
      return new Response("OK");
    }

    if (userState?.step === "awaiting_details" && update.message?.text) {
      const parts = update.message.text.trim().split(",").map(s => s.trim());
      if (parts.length < 2 || !parts[0] || !parts[1]) {
        await sendMessage(recipientId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É.");
        return new Response("OK");
      }
      const [name, phone] = parts;
      const aptNum = userState.apartment;
      let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];
      if (!registered.find(u => u.userId === userId)) {
        registered.push({ userId, name, phone });
        await env.Teligy3V.put(`apt:${aptNum}`, JSON.stringify(registered));
      }

      // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const uniqueLink = `https://t.me/+${Math.random().toString(36).substring(2, 10)}`;

      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_code", uniqueLink }));
      if (env.ADMIN_CHAT_ID) {
        await sendMessage(
          env.ADMIN_CHAT_ID,
          `–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫: –ö–≤–∞—Ä—Ç–∏—Ä–∞ ${aptNum}, –Ü–º‚Äô—è: ${name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`
        );
      }
      await sendMessage(recipientId, `–û—Å—å –≤–∞—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è: ${uniqueLink}`);
      return new Response("OK");
    }

    return new Response("OK");
  },
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function removeInactiveUsers(env) {
  const cutoff = Date.now() - 60000; // 1 —Ö–≤–∏–ª–∏–Ω–∞
  const list = await env.Teligy3V.list({ prefix: "joined_at:" });

  for (const key of list.keys) {
    const userId = key.name.split(":")[1];
    const joinedAtStr = await env.Teligy3V.get(`joined_at:${userId}`);
    const stateRaw = await env.Teligy3V.get(`state:${userId}`);

    if (!joinedAtStr || !stateRaw) continue;
    const joinedAt = Number(joinedAtStr);

    let state;
    try {
      state = JSON.parse(stateRaw);
    } catch {
      continue;
    }

    if (joinedAt < cutoff && state.step === "not_registered") {
      // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≥—Ä—É–ø–∏
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/banChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: env.GROUP_CHAT_ID, user_id: Number(userId) }),
      });

      await env.Teligy3V.delete(`joined_at:${userId}`);
      await env.Teligy3V.delete(`state:${userId}`);
      await env.Teligy3V.delete(`last_active:${userId}`);
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è cron
export async function scheduled(event, env, ctx) {
  await removeInactiveUsers(env);
}
