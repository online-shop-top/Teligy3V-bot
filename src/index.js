export default {
  async fetch(request, env) {
    if (request.method !== "POST") {
      return new Response("Hello from Telegram Group Bot!", { status: 200 });
    }

    const update = await request.json();
    console.log("Incoming update:", JSON.stringify(update));

    // --- 1Ô∏è‚É£ –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è ---
    if (update.message && update.message.new_chat_members) {
      for (const member of update.message.new_chat_members) {
        const chatId = update.message.chat.id;
        const userId = member.id;
        const firstName = member.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

        // –¢–∏–º—á–∞—Å–æ–≤–æ –±–ª–æ–∫—É—î–º–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
        await restrictMember(env.TG_BOT_TOKEN, chatId, userId);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è"
        await sendJoinMessage(env.TG_BOT_TOKEN, chatId, userId, firstName);
      }
      return new Response("OK", { status: 200 });
    }

    // --- 2Ô∏è‚É£ –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–∫–∏ ---
    if (update.callback_query) {
      const chatId = update.callback_query.message.chat.id;
      const userId = update.callback_query.from.id;

      if (update.callback_query.data === `join_${userId}`) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —É KV —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞
        let userData = (await env.KV.get(`pending_users:${userId}`, { type: "json" })) || {
          status: "pending",
          chat_id: chatId,
        };
        await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await sendMessage(env.TG_BOT_TOKEN, userId, "–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏.");
      }

      // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
      await answerCallback(env.TG_BOT_TOKEN, update.callback_query.id, "‚úÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ!");
      return new Response("OK", { status: 200 });
    }

    // --- 3Ô∏è‚É£ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
    if (update.message && update.message.text) {
      const chatId = update.message.chat.id;
      const userId = update.message.from.id;
      const text = update.message.text.trim();

      let userData = (await env.KV.get(`pending_users:${userId}`, { type: "json" })) || null;
      if (!userData) return new Response("OK", { status: 200 });

      // --- –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏ ---
      if (userData.status === "pending") {
        const apartmentNumber = text;

        const residents = (await env.KV.get(`apartments:${apartmentNumber}`, { type: "json" })) || [];
        if (residents.length >= 2) {
          await sendMessage(env.TG_BOT_TOKEN, userId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±.");
          return new Response("OK", { status: 200 });
        }

        userData.status = "awaiting_name_phone";
        userData.apartment = apartmentNumber;
        await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));

        await sendMessage(env.TG_BOT_TOKEN, userId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω");
        return new Response("OK", { status: 200 });
      }

      // --- –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É ---
      if (userData.status === "awaiting_name_phone") {
        const parts = text.split(",").map(s => s.trim());
        if (parts.length !== 2) {
          await sendMessage(env.TG_BOT_TOKEN, userId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω");
          return new Response("OK", { status: 200 });
        }

        const [name, phone] = parts;
        const adminCode = Math.floor(1000 + Math.random() * 9000);

        userData.name = name;
        userData.phone = phone;
        userData.admin_code = adminCode;
        userData.status = "awaiting_admin_code";
        await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        const adminId = Number(env.ADMIN_CHAT_ID);
        await sendMessage(env.TG_BOT_TOKEN, adminId, 
          `–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\n–Ü–º'—è: ${name}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${userData.apartment}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${adminCode}`
        );

        await sendMessage(env.TG_BOT_TOKEN, userId, "–í–∞—à—ñ –¥–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í–≤–µ–¥—ñ—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.");
        return new Response("OK", { status: 200 });
      }

      // --- –í–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ---
      if (userData.status === "awaiting_admin_code") {
        const enteredCode = text;
        if (enteredCode === String(userData.admin_code)) {
          // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          userData.status = "approved";
          await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));

          const residents = (await env.KV.get(`apartments:${userData.apartment}`, { type: "json" })) || [];
          residents.push(userId);
          await env.KV.put(`apartments:${userData.apartment}`, JSON.stringify(residents));

          // –ó–Ω—ñ–º–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
          await restrictMember(env.TG_BOT_TOKEN, userData.chat_id, userId, true);

          await sendMessage(env.TG_BOT_TOKEN, userId, `‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ –≥—Ä—É–ø–∏!`);
        } else {
          await sendMessage(env.TG_BOT_TOKEN, userId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
        return new Response("OK", { status: 200 });
      }
    }

    return new Response("OK", { status: 200 });
  },
};

// --- –§—É–Ω–∫—Ü—ñ—ó –¥–æ–ø–æ–º—ñ–∂–Ω—ñ ---
async function sendMessage(token, chatId, text, keyboard) {
  const body = { chat_id: chatId, text };
  if (keyboard) body.reply_markup = keyboard;

  const resp = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });
  const data = await resp.json();
  if (!data.ok) console.error("Telegram sendMessage error:", data);
}

async function answerCallback(token, callbackId, text) {
  const resp = await fetch(`https://api.telegram.org/bot${token}/answerCallbackQuery`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ callback_query_id: callbackId, text, show_alert: false }),
  });
  const data = await resp.json();
  if (!data.ok) console.error("Telegram answerCallbackQuery error:", data);
}

async function restrictMember(token, chatId, userId, unrestrict = false) {
  const permissions = unrestrict
    ? {
        can_send_messages: true,
        can_send_media_messages: true,
        can_send_polls: true,
        can_send_other_messages: true,
        can_add_web_page_previews: true,
        can_invite_users: true,
      }
    : { can_send_messages: false };

  const resp = await fetch(`https://api.telegram.org/bot${token}/restrictChatMember`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, user_id: userId, permissions }),
  });
  const data = await resp.json();
  if (!data.ok) console.error("Telegram restrictChatMember error:", data);
}

async function sendJoinMessage(token, chatId, userId, firstName) {
  const keyboard = { inline_keyboard: [[{ text: "‚úÖ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data: `join_${userId}` }]] };
  await sendMessage(token, chatId,
    `üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${firstName}!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —á–∞—Ç—É.`,
    keyboard
  );
}
