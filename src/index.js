export default {
  async fetch(request, env) {
    if (request.method === "OPTIONS") {
      return new Response(null, { headers: { "Access-Control-Allow-Origin": "*" } });
    }

    if (request.headers.get("CF-Worker-Cron") === "true") {
      await removeInactiveUsers(env);
      return new Response("Cron job completed");
    }

    if (request.method !== "POST") {
      return new Response("Method Not Allowed", { status: 405 });
    }

    const update = await request.json();

    async function sendMessage(chatId, text, reply_markup = null) {
      const body = { chat_id: chatId, text };
      if (reply_markup) body.reply_markup = reply_markup;
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
    }

    const userId = update.message?.from?.id || update.callback_query?.from?.id;
    if (!userId) return new Response("OK");
    const chatId = update.message?.chat?.id || update.callback_query?.from?.id;

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    await env.Teligy3V.put(`last_active:${userId}`, Date.now().toString());

    let userStateRaw = await env.Teligy3V.get(`state:${userId}`);
    let userState = null;
    try { userState = userStateRaw ? JSON.parse(userStateRaw) : null; } catch { userState = null; }

    if (update.message?.text === "/start") {
      const firstName = update.message.from.first_name || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";
      await sendMessage(chatId,
        `üëã –ü—Ä–∏–≤—ñ—Ç, ${firstName}!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏.`,
        { inline_keyboard: [[{ text: "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨", callback_data: "join_request" }]] }
      );
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_join" }));
      return new Response("OK");
    }

    if (update.callback_query?.data === "join_request") {
      // –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç—É –∑ –∫–Ω–æ–ø–∫–æ—é –ü–û–ì–û–î–ñ–£–Æ–°–¨
      const rulesText = `
–ú–µ—Ç–∞ —á–∞—Ç—É:
 –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –ø—Ä–∏–π–º–∞–Ω–Ω—è —Ä—ñ—à–µ–Ω—å –ø–æ –±—É–¥–∏–Ω–∫—É, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–µ —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–¥—ñ—ó, –∞–≤–∞—Ä—ñ—ó —Ç–æ—â–æ.
 –ù–µ –¥–ª—è –ø–æ–ª—ñ—Ç–∏–∫–∏, —Ä–µ–∫–ª–∞–º–∏ —á–∏ –æ—Å–æ–±–∏—Å—Ç–∏—Ö —Å—É–ø–µ—Ä–µ—á–æ–∫.

–ü–æ–≤–∞–∂–∞–π —Å—É—Å—ñ–¥—ñ–≤
‚Äì –ë–µ–∑ –æ–±—Ä–∞–∑, —Ö–∞–º—Å—Ç–≤–∞ —á–∏ –ø—Ä–∏–Ω–∏–∂–µ–Ω—å.
‚Äì –ö—Ä–∏—Ç–∏–∫–∞ –º–∞—î –±—É—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—é.
‚Äì –û—Å–æ–±–∏—Å—Ç—ñ —Å—É–ø–µ—Ä–µ—á–∫–∏ ‚Äî —É –ø—Ä–∏–≤–∞—Ç.

–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ:
 –ü–æ–ª—ñ—Ç–∏—á–Ω—ñ, —Ä–µ–ª—ñ–≥—ñ–π–Ω—ñ, –≤–æ—î–Ω–Ω—ñ —Ç–µ–º–∏
 –†–µ–∫–ª–∞–º–∞, —Å–ø–∞–º, –ø—Ä–æ–¥–∞–∂
 –ù–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
 –ú–∞—Ç–∏, –æ–±—Ä–∞–∑–ª–∏–≤—ñ –∂–∞—Ä—Ç–∏, —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å

–ß–∞—Å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:
 –ó 08:00 –¥–æ 22:00
 –£–Ω–æ—á—ñ ‚Äî –ª–∏—à–µ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –∞–≤–∞—Ä—ñ—ó!

 –ó–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª ‚Äî –æ–±–º–µ–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.

–í—Å—Ç—É–ø –¥–æ —á–∞—Ç—É = –∑–≥–æ–¥–∞ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏.

–ë—É–¥—å–º–æ –≤–≤—ñ—á–ª–∏–≤–∏–º–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ ‚Äî —Ä–∞–∑–æ–º –∑—Ä–æ–±–∏–º–æ –Ω–∞—à –±—É–¥–∏–Ω–æ–∫ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–º!`;

      await sendMessage(chatId, rulesText, {
        inline_keyboard: [[{ text: "–ü–û–ì–û–î–ñ–£–Æ–°–¨", callback_data: "rules_accept" }]]
      });
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_rules_accept" }));
      return new Response("OK");
    }

    if (update.callback_query?.data === "rules_accept") {
      await sendMessage(chatId, "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏.");
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_apartment" }));
      return new Response("OK");
    }

    if (userState?.step === "awaiting_apartment" && update.message?.text) {
      const aptNum = parseInt(update.message.text.trim(), 10);
      if (Number.isNaN(aptNum) || aptNum < 1 || aptNum > 120) {
        await sendMessage(chatId, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      } else {
        let registered = await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" }) || [];
        if (registered.length >= 2) {
          await sendMessage(chatId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
          await env.Teligy3V.delete(`state:${userId}`);
        } else {
          await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_details", apartment: aptNum }));
          await sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω, 0681234567");
        }
      }
      return new Response("OK");
    }

    if (userState?.step === "awaiting_details" && update.message?.text) {
      const text = update.message.text.trim();
      const parts = text.split(",").map(s => s.trim());
      if (parts.length < 2 || !parts[0] || !parts[1]) {
        await sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω, 0681234567");
        return new Response("OK");
      }
      const [name, phone] = parts;
      const aptNum = userState.apartment;

      let registered = await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" }) || [];
      registered.push({ userId, name, phone });
      await env.Teligy3V.put(`apt:${aptNum}`, JSON.stringify(registered));

      const code = Math.floor(1000 + Math.random() * 9000).toString();
      await env.Teligy3V.put(`code:${userId}`, code);
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_code" }));

      if (env.ADMIN_CHAT_ID) {
        await sendMessage(env.ADMIN_CHAT_ID,
          `–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${aptNum}\n–Ü–º‚Äô—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${code}`
        );
      }

      await sendMessage(chatId, `–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.`);
      return new Response("OK");
    }

    if (userState?.step === "awaiting_code" && update.message?.text) {
      const inputCode = update.message.text.trim();
      const savedCode = await env.Teligy3V.get(`code:${userId}`);

      if (inputCode === savedCode) {
        await sendMessage(chatId, `–ö–æ–¥ –≤—ñ—Ä–Ω–∏–π! –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏:\nhttps://t.me/+6_OJtJfRHSZjZjQy`);
        await env.Teligy3V.delete(`state:${userId}`);
        await env.Teligy3V.delete(`code:${userId}`);
      } else {
        await sendMessage(chatId, `–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
      }
      return new Response("OK");
    }

    return new Response("OK");
  },
};

async function removeInactiveUsers(env) {
  const cutoff = Date.now() - 3600 * 1000; // 1 –≥–æ–¥–∏–Ω–∞ –Ω–∞–∑–∞–¥
  const list = await env.Teligy3V.list({ prefix: "state:" });
  for (const key of list.keys) {
    const userId = key.name.split(":")[1];
    const stateRaw = await env.Teligy3V.get(key.name);
    const lastActiveStr = await env.Teligy3V.get(`last_active:${userId}`);
    if (!stateRaw || !lastActiveStr) continue;
    const state = JSON.parse(stateRaw);
    const lastActive = Number(lastActiveStr);
    if (
      lastActive < cutoff &&
      state.step !== "awaiting_code" &&
      state.step !== "registered"
    ) {
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/banChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: env.GROUP_CHAT_ID,
          user_id: Number(userId),
        }),
      });
      await env.Teligy3V.delete(`state:${userId}`);
      await env.Teligy3V.delete(`code:${userId}`);
      await env.Teligy3V.delete(`last_active:${userId}`);
    }
  }
}
