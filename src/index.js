export default {
  async fetch(request, env) {
    if (request.method === "POST") {
      const update = await request.json();
      console.log(JSON.stringify(update).slice(0, 400));

      const kv = env.Teligy3V;
      const msg = update.message;
      if (!msg) return new Response("No message", { status: 200 });

      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const text = msg.text?.trim() || "";

      async function sendMessage(to, text, buttons = null) {
        const url = `https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`;
        const body = { chat_id: to, text, parse_mode: "HTML" };
        if (buttons) body.reply_markup = { inline_keyboard: buttons };
        await fetch(url, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        });
      }

      // 1Ô∏è‚É£ –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨"
      if (msg.chat.type !== "private") {
        if (text === "/start" || text.includes("–ø—Ä–∏—î–¥–Ω–∞—Ç–∏")) {
          const botUsername = env.BOT_USERNAME; // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "teligy3v_bot"
          const startUrl = `https://t.me/${botUsername}?start=join`;
          await sendMessage(chatId, "–©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá", [
            [{ text: "üîë –ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨", url: startUrl }],
          ]);
        }
        return new Response("OK", { status: 200 });
      }

      // 2Ô∏è‚É£ –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
      if (msg.chat.type === "private") {
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ —á–µ—Ä–µ–∑ /start join
        if (text.startsWith("/start")) {
          if (text.includes("join")) {
            await kv.put(`pending:${userId}`, JSON.stringify({ status: "awaiting_apartment" }));
            await sendMessage(chatId, "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:");
            return new Response("OK", { status: 200 });
          } else {
            await sendMessage(chatId, "–ü—Ä–∏–≤—ñ—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–Ω–æ–ø–∫—É '–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨' —É –≥—Ä—É–ø—ñ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.");
            return new Response("OK", { status: 200 });
          }
        }

        // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        let userData = await kv.get(`pending:${userId}`);
        if (userData) userData = JSON.parse(userData);

        if (!userData) {
          await sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨' —É –≥—Ä—É–ø—ñ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.");
          return new Response("OK", { status: 200 });
        }

        if (userData.status === "awaiting_apartment") {
          const apartment = text;
          userData = { status: "awaiting_contact", apartment };
          await kv.put(`pending:${userId}`, JSON.stringify(userData));
          await sendMessage(chatId, "–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—á–µ—Ä–µ–∑ –∫–æ–º—É):");
          return new Response("OK", { status: 200 });
        }

        if (userData.status === "awaiting_contact") {
          const [name, phone] = text.split(",").map(s => s.trim());
          if (!name || !phone) {
            await sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω, 0501234567");
            return new Response("OK", { status: 200 });
          }

          const code = Math.floor(1000 + Math.random() * 9000).toString();
          userData = { ...userData, status: "awaiting_code", name, phone, code };
          await kv.put(`pending:${userId}`, JSON.stringify(userData));

          await sendMessage(env.ADMIN_CHAT_ID, 
            `üîî –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\n–Ü–º‚Äô—è: ${name}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${userData.apartment}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–æ–¥: ${code}`
          );
          await sendMessage(chatId, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è–∫–∏–π —Ç–æ–±—ñ –ø–æ–≤—ñ–¥–æ–º–∏–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:");
          return new Response("OK", { status: 200 });
        }

        if (userData.status === "awaiting_code") {
          if (text === userData.code) {
            const inviteLink = env.GROUP_INVITE_URL; // –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É
            await sendMessage(chatId, `‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä—É–ø–∏:\n${inviteLink}`);
            userData.status = "approved";
            await kv.put(`pending:${userId}`, JSON.stringify(userData));
          } else {
            await sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.");
          }
          return new Response("OK", { status: 200 });
        }
      }

      return new Response("OK", { status: 200 });
    }

    return new Response("Hello from Worker!", { status: 200 });
  },
};
