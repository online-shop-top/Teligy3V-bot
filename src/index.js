export default {
  async fetch(request, env) {
    try {
      if (request.method === "OPTIONS") {
        return new Response(null, {
          headers: { "Access-Control-Allow-Origin": "*" },
        });
      }

      if (request.headers.get("CF-Worker-Cron") === "true") {
        await removeInactiveUsers(env);
        return new Response("Cron job completed");
      }

      if (request.method !== "POST") {
        return new Response("Only POST method is allowed for this endpoint.", { status: 405 });
      }

      const update = await request.json();

      async function sendMessage(chatId, text, reply_markup = null) {
        const body = { chat_id: chatId, text };
        if (reply_markup) body.reply_markup = reply_markup;

        await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        });
      }

      async function answerCallback(id, text = null) {
        await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/answerCallbackQuery`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ callback_query_id: id, text })
        });
      }

      const userId =
        update.message?.from?.id ||
        update.callback_query?.from?.id ||
        update.chat_member?.new_chat_member?.user?.id;

      if (!userId) {
        return new Response("Invalid user data", { status: 400 });
      }

      // ‚úÖ –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫
      if (update.chat_member?.new_chat_member?.status === "member") {
        await env.Teligy3V.put(`joined_at:${userId}`, Date.now().toString());
        await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "not_registered" }));
        return new Response("OK");
      }

      // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
      await env.Teligy3V.put(`last_active:${userId}`, Date.now().toString());

      let userStateRaw = await env.Teligy3V.get(`state:${userId}`);
      let userState = null;
      try {
        userState = userStateRaw ? JSON.parse(userStateRaw) : null;
      } catch {}

      // ‚úÖ /start
      if (update.message?.text === "/start") {
        const firstName = update.message.from.first_name || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";

        await sendMessage(
          userId,
          `üëã –ü—Ä–∏–≤—ñ—Ç, ${firstName}!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏.`,
          { inline_keyboard: [[{ text: "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨ ‚úÖ", callback_data: "join_request" }]] }
        );

        await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_join" }));
        return new Response("OK");
      }

      // ‚úÖ –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨"
      if (update.callback_query?.data === "join_request") {
        await answerCallback(update.callback_query.id);
        await sendMessage(
          userId,
          `üë• –ú–µ—Ç–∞ —á–∞—Ç—É:
–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–µ —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–¥—ñ—ó, –∞–≤–∞—Ä—ñ—ó —Ç–æ—â–æ.
‚ùó –ù–µ –¥–ª—è –ø–æ–ª—ñ—Ç–∏–∫–∏, —Ä–µ–∫–ª–∞–º–∏ —á–∏ –æ—Å–æ–±–∏—Å—Ç–∏—Ö —Å—É–ø–µ—Ä–µ—á–æ–∫.

ü§ù –ü–æ–≤–∞–∂–∞–π —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É:
‚Äì –ë–µ–∑ –æ–±—Ä–∞–∑, —Ö–∞–º—Å—Ç–≤–∞ —á–∏ –ø—Ä–∏–Ω–∏–∂–µ–Ω—å.
‚Äì –ö—Ä–∏—Ç–∏–∫–∞ –º–∞—î –±—É—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—é.
‚Äì –û—Å–æ–±–∏—Å—Ç—ñ —Å—É–ø–µ—Ä–µ—á–∫–∏ ‚Äî —É –ø—Ä–∏–≤–∞—Ç.

üö´ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ:
‚Äì –ü–æ–ª—ñ—Ç–∏—á–Ω—ñ, —Ä–µ–ª—ñ–≥—ñ–π–Ω—ñ, –≤–æ—î–Ω–Ω—ñ —Ç–µ–º–∏.
‚Äì –†–µ–∫–ª–∞–º–∞, —Å–ø–∞–º, –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—ñ–≤/–ø–æ—Å–ª—É–≥.
‚Äì –ü–æ—à–∏—Ä–µ–Ω–Ω—è –Ω–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
‚Äì –ù–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞ –ª–µ–∫—Å–∏–∫–∞, –æ–±—Ä–∞–∑–ª–∏–≤—ñ –∂–∞—Ä—Ç–∏, —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å.

üïó –ß–∞—Å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: –ó 08:00 –¥–æ 22:00.
üö® –£–Ω–æ—á—ñ ‚Äî –ª–∏—à–µ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –∞–≤–∞—Ä—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!

üëÆ –ó–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª ‚Äî –æ–±–º–µ–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.

‚úÖ –í—Å—Ç—É–ø –¥–æ —á–∞—Ç—É = –∑–≥–æ–¥–∞ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏.

‚ù§Ô∏è –ë—É–¥—å–º–æ –≤–≤—ñ—á–ª–∏–≤–∏–º–∏, –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–º–∏ ‚Äî —Ä–∞–∑–æ–º –∑—Ä–æ–±–∏–º–æ –Ω–∞—à –±—É–¥–∏–Ω–æ–∫ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–º!`,
          { inline_keyboard: [[{ text: "–ü–û–ì–û–î–ñ–£–Æ–°–¨ ‚úÖ", callback_data: "rules_accept" }]] }
        );

        await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_rules_accept" }));
        return new Response("OK");
      }

      // ‚úÖ –ü–æ–≥–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª
      if (update.callback_query?.data === "rules_accept") {
        await answerCallback(update.callback_query.id);
        await sendMessage(userId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:");
        await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_apartment" }));
        return new Response("OK");
      }

      // ‚úÖ –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏
      if (userState?.step === "awaiting_apartment" && update.message?.text) {
        const aptNum = parseInt(update.message.text.trim(), 10);

        if (isNaN(aptNum) || aptNum < 1 || aptNum > 120) {
          await sendMessage(userId, "‚ùå –¢–∞–∫–æ—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
          return new Response("OK");
        }

        let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];

        if (registered.length >= 2) {
          await sendMessage(userId, "‚ùå –ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ 2 –º–µ—à–∫–∞–Ω—Ü—ñ.");
          await env.Teligy3V.delete(`state:${userId}`);
          await env.Teligy3V.delete(`joined_at:${userId}`);
          return new Response("OK");
        }

        await env.Teligy3V.put(
          `state:${userId}`,
          JSON.stringify({ step: "awaiting_details", apartment: aptNum })
        );

        await sendMessage(userId, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É:");
        return new Response("OK");
      }

      // ‚úÖ –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      if (userState?.step === "awaiting_details" && update.message?.text) {
        const [name, phone] = update.message.text.trim().split(",").map(s => s.trim());

        if (!name || !phone) {
          await sendMessage(userId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω, 0681234567");
          return new Response("OK");
        }

        const aptNum = userState.apartment;
        let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];

        registered.push({ userId, name, phone });
        await env.Teligy3V.put(`apt:${aptNum}`, JSON.stringify(registered));

        const code = Math.floor(100000 + Math.random() * 900000).toString();
        await env.Teligy3V.put(`code:${userId}`, code);
        await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_code", apartment: aptNum }));

        await sendMessage(env.ADMIN_CHAT_ID, `üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ ${aptNum}\nüë§ ${name}\nüì± ${phone}\nüîë –ö–æ–¥: ${code}`);
        await sendMessage(userId, "‚úÖ –ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        return new Response("OK");
      }

      // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É
      if (userState?.step === "awaiting_code" && update.message?.text) {
        const savedCode = await env.Teligy3V.get(`code:${userId}`);
        const aptNum = userState.apartment;

        if (update.message.text.trim() !== savedCode) {
          await sendMessage(userId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –©–µ —Ä–∞–∑:");
          return new Response("OK");
        }

        const resp = await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/createChatInviteLink`, {
          method: "POST",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify({ chat_id: env.GROUP_CHAT_ID, member_limit: 1 })
        });

        const invite = await resp.json();
        const link = invite.result.invite_link;

        await sendMessage(userId, `‚úÖ –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n–û—Å—å –≤–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n${link}`);

        await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "registered" }));
        await env.Teligy3V.delete(`code:${userId}`);
        await env.Teligy3V.delete(`joined_at:${userId}`);

        return new Response("OK");
      }

      return new Response("OK");
    } catch (error) {
      console.error("Error processing request:", error);
      return new Response("Internal Server Error", { status: 500 });
    }
  },

  async scheduled(event, env) {
    await removeInactiveUsers(env);
  },
};

// ‚úÖ –ê–≤—Ç–æ-–≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö
async function removeInactiveUsers(env) {
  const cutoff = Date.now() - 30 * 60 * 1000; // 30 —Ö–≤–∏–ª–∏–Ω

  const list = await env.Teligy3V.list({ prefix: "joined_at:" });
  const aptList = await env.Teligy3V.list({ prefix: "apt:" });

  for (const key of list.keys) {
    const userId = key.name.split(":")[1];
    const joinedAtStr = await env.Teligy3V.get(`joined_at:${userId}`);
    const stateRaw = await env.Teligy3V.get(`state:${userId}`);

    if (!joinedAtStr || !stateRaw) continue;

    const joinedAt = Number(joinedAtStr);
    const state = JSON.parse(stateRaw);

    if (
      joinedAt < cutoff &&
      !["awaiting_code", "registered"].includes(state.step)
    ) {
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/banChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: env.GROUP_CHAT_ID,
          user_id: userId,
        }),
      });

      await env.Teligy3V.delete(`joined_at:${userId}`);
      await env.Teligy3V.delete(`state:${userId}`);
      await env.Teligy3V.delete(`code:${userId}`);
      await env.Teligy3V.delete(`last_active:${userId}`);
      await env.Teligy3V.delete(`apt:*${userId}`);
    }
  }
}
