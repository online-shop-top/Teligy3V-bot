export default {
  async fetch(request, env) {
    if (request.method === "OPTIONS") {
      return new Response(null, { headers: { "Access-Control-Allow-Origin": "*" } });
    }

    if (request.headers.get("CF-Worker-Cron") === "true") {
      await removeInactiveUsers(env);
      return new Response("Cron job completed");
    }

    if (request.method !== "POST") {
      return new Response("Method Not Allowed", { status: 405 });
    }

    const update = await request.json();

    async function sendMessage(chatId, text, reply_markup = null) {
      const body = { chat_id: chatId, text };
      if (reply_markup) body.reply_markup = reply_markup;
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
    }

    const userId = update.message?.from?.id || update.callback_query?.from?.id;
    if (!userId) return new Response("OK");

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏
    const chatType = update.message?.chat?.type;
    const isGroupChat = chatType === "group" || chatType === "supergroup";

    // –î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
    const recipientId = userId;

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    await env.Teligy3V.put(`last_active:${userId}`, Date.now().toString());

    let userStateRaw = await env.Teligy3V.get(`state:${userId}`);
    let userState = null;
    try {
      userState = userStateRaw ? JSON.parse(userStateRaw) : null;
    } catch {
      userState = null;
    }

    // –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨"
    if (update.message?.text === "/start") {
      const firstName = update.message.from.first_name || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";
      await sendMessage(
        recipientId,
        `üëã –ü—Ä–∏–≤—ñ—Ç, ${firstName}!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏.`,
        { inline_keyboard: [[{ text: "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨", callback_data: "join_request" }]] }
      );
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_join" }));
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨"
    if (update.callback_query?.data === "join_request") {
      const rulesText = `–ü–†–ê–í–ò–õ–ê –ß–ê–¢–£...

(–∑–º—ñ—Å—Ç –ø—Ä–∞–≤–∏–ª —Ç—É—Ç, —è–∫ —Ä–∞–Ω—ñ—à–µ)`;

      await sendMessage(recipientId, rulesText, {
        inline_keyboard: [[{ text: "–ü–û–ì–û–î–ñ–£–Æ–°–¨", callback_data: "rules_accept" }]],
      });
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_rules_accept" }));
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª
    if (update.callback_query?.data === "rules_accept") {
      await sendMessage(recipientId, "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏.");
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_apartment" }));
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏
    if (userState?.step === "awaiting_apartment" && update.message?.text) {
      const aptNum = parseInt(update.message.text.trim(), 10);
      if (isNaN(aptNum) || aptNum < 1 || aptNum > 120) {
        await sendMessage(recipientId, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      } else {
        let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];
        if (registered.length >= 2) {
          await sendMessage(recipientId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º—É–º. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
          await env.Teligy3V.delete(`state:${userId}`);
        } else {
          await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_details", apartment: aptNum }));
          await sendMessage(recipientId, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω, 0681234567");
        }
      }
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —ñ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if (userState?.step === "awaiting_details" && update.message?.text) {
      const text = update.message.text.trim();
      const parts = text.split(",").map(s => s.trim());
      if (parts.length < 2 || !parts[0] || !parts[1]) {
        await sendMessage(recipientId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É.");
        return new Response("OK");
      }
      const [name, phone] = parts;
      const aptNum = userState.apartment;

      let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];
      if (!registered.find((u) => u.userId === userId)) {
        registered.push({ userId, name, phone });
        await env.Teligy3V.put(`apt:${aptNum}`, JSON.stringify(registered));
      }

      const code = Math.floor(1000 + Math.random() * 9000).toString();
      await env.Teligy3V.put(`code:${userId}`, code);
      await env.Teligy3V.put(`state:${userId}`, JSON.stringify({ step: "awaiting_code" }));

      if (env.ADMIN_CHAT_ID) {
        await sendMessage(
          env.ADMIN_CHAT_ID,
          `–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${aptNum}\n–Ü–º‚Äô—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–æ–¥: ${code}`
        );
      }

      await sendMessage(recipientId, `–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if (userState?.step === "awaiting_code" && update.message?.text) {
      const inputCode = update.message.text.trim();
      const savedCode = await env.Teligy3V.get(`code:${userId}`);
      if (inputCode === savedCode) {
        await sendMessage(recipientId, "–ö–æ–¥ –≤—ñ—Ä–Ω–∏–π! –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏: https://t.me/+...");
        await env.Teligy3V.delete(`state:${userId}`);
        await env.Teligy3V.delete(`code:${userId}`);
      } else {
        await sendMessage(recipientId, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }
      return new Response("OK");
    }

    return new Response("OK");
  },
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤, —è–∫—ñ –¥–æ–ª—É—á–∏–ª–∏—Å—è –±—ñ–ª—å—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏ —Ç–æ–º—É —ñ –Ω–µ –ø—Ä–æ–π—à–ª–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
async function removeInactiveUsers(env) {
  const cutoff = Date.now() - 60000; // 1 —Ö–≤–∏–ª–∏–Ω–∞
  const list = await env.Teligy3V.list({ prefix: "joined_at:" });
  for (const key of list.keys) {
    const userId = key.name.split(":")[1];
    const joinedAtStr = await env.Teligy3V.get(`joined_at:${userId}`);
    const stateRaw = await env.Teligy3V.get(`state:${userId}`);
    if (!joinedAtStr || !stateRaw) continue;
    const joinedAt = Number(joinedAtStr);
    if (joinedAt < cutoff) {
      // –í–∏–ª—É—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≥—Ä—É–ø–∏
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/banChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: env.GROUP_CHAT_ID, user_id: Number(userId) }),
      });
      // –û—á–∏—â–∞—î–º–æ KV
      await env.Teligy3V.delete(`joined_at:${userId}`);
      await env.Teligy3V.delete(`state:${userId}`);
      await env.Teligy3V.delete(`code:${userId}`);
    }
  }
}
