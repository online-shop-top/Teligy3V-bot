export default {
  async fetch(request, env) {
    if (request.method === "POST") {
      try {
        const update = await request.json();
        console.log("Incoming update:", JSON.stringify(update));

        if (!update.message) return new Response("No message", { status: 200 });

        const chatId = update.message.chat.id;
        const userId = update.message.from.id;
        const text = update.message.text?.trim() || "";

        const kv = env.Teligy3V;

        async function sendMessage(to, message) {
          try {
            const url = `https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`;
            const body = { chat_id: to, text: message };
            const resp = await fetch(url, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body),
            });
            const data = await resp.text();
            console.log("Telegram sendMessage response:", data);
          } catch (error) {
            console.error("Failed to send message:", error);
          }
        }

        // –ö–æ–¥–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if (text.toLowerCase() === "—Ç–µ—Å—Ç–±–æ—Ç") {
          await sendMessage(userId, "üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ –±–æ—Ç–∞...");

          let testApartment = "123";
          let testName = "–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
          let testPhone = "+380501234567";
          let testCode = Math.floor(1000 + Math.random() * 9000).toString();

          await kv.put(`pending:${userId}`, JSON.stringify({ status: "awaiting_apartment" }));
          await sendMessage(userId, `–¢–µ—Å—Ç: –ß–µ–∫–∞—î–º–æ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ (—ñ–º—ñ—Ç–∞—Ü—ñ—è)`);

          // –Ü–º—ñ—Ç–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏
          await kv.put(`pending:${userId}`, JSON.stringify({ status: "awaiting_contact", apartmentNumber: testApartment }));
          await sendMessage(userId, `–¢–µ—Å—Ç: –í–≤–µ–¥–µ–Ω–æ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏: ${testApartment}`);

          // –Ü–º—ñ—Ç–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
          await kv.put(`pending:${userId}`, JSON.stringify({ status: "awaiting_code", apartmentNumber: testApartment, name: testName, phone: testPhone, code: testCode  }));
          await sendMessage(userId, `–¢–µ—Å—Ç: –í–≤–µ–¥–µ–Ω–æ —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: ${testName}, ${testPhone}`);

          // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–¥—É
          await kv.put(`pending:${userId}`, JSON.stringify({ status: "approved", apartmentNumber: testApartment, name: testName, phone: testPhone }));
          const apartmentKey = `apartment:${testApartment}`;
          const existing = (await kv.get(apartmentKey, "json")) || [];
          existing.push({ userId, name: testName, phone: testPhone });
          await kv.put(apartmentKey, JSON.stringify(existing));

          await sendMessage(userId, `‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ —É—Å–ø—ñ—à–Ω–æ! –í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—É–≤ '${testCode}'. –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å.`);
          return new Response("OK", { status: 200 });
        }

        let pendingData = await kv.get(`pending:${userId}`, "json");

        if (!pendingData) {
          await kv.put(`pending:${userId}`, JSON.stringify({ status: "awaiting_apartment" }));
          await sendMessage(userId, "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:");
          return new Response("OK", { status: 200 });
        }

        if (pendingData.status === "awaiting_apartment") {
          const apartmentNumber = text;
          if (!/^\d+$/.test(apartmentNumber)) {
            await sendMessage(userId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏).");
            return new Response("OK", { status: 200 });
          }
          const existing = (await kv.get(`apartment:${apartmentNumber}`, "json")) || [];
          if (existing.length >= 2) {
            await sendMessage(userId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            return new Response("OK", { status: 200 });
          }
          pendingData = { status: "awaiting_contact", apartmentNumber };
          await kv.put(`pending:${userId}`, JSON.stringify(pendingData));
          await sendMessage(userId, "–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—á–µ—Ä–µ–∑ –∫–æ–º—É):");
          return new Response("OK", { status: 200 });
        }

        if (pendingData.status === "awaiting_contact") {
          const [name, phone] = text.split(",").map(s => s.trim());
          if (!name || !phone || !/^\+?\d{7,15}$/.test(phone)) {
            await sendMessage(userId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω, +380501234567");
            return new Response("OK", { status: 200 });
          }

          const code = Math.floor(1000 + Math.random() * 9000).toString();

          pendingData = { status: "awaiting_code", apartmentNumber: pendingData.apartmentNumber, name, phone, code };
          await kv.put(`pending:${userId}`, JSON.stringify(pendingData));

          await sendMessage(env.ADMIN_CHAT_ID, `–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\n–Ü–º'—è: ${name}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${pendingData.apartmentNumber}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${code}`);
          await sendMessage(userId, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è–∫–∏–π —Ç–æ–±—ñ –ø–æ–≤—ñ–¥–æ–º–∏–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:");
          return new Response("OK", { status: 200 });
        }

        if (pendingData.status === "awaiting_code") {
          if (text === pendingData.code) {
            pendingData.status = "approved";
            await kv.put(`pending:${userId}`, JSON.stringify(pendingData));

            const apartmentKey = `apartment:${pendingData.apartmentNumber}`;
            const existing = (await kv.get(apartmentKey, "json")) || [];
            existing.push({ userId, name: pendingData.name, phone: pendingData.phone });
            await kv.put(apartmentKey, JSON.stringify(existing));

            await sendMessage(userId, "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ –≥—Ä—É–ø–∏!");
            return new Response("OK", { status: 200 });
          } else {
            await sendMessage(userId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            return new Response("OK", { status: 200 });
          }
        }

        return new Response("OK", { status: 200 });
      } catch (error) {
        console.error("Error handling request:", error);
        return new Response("Internal Server Error", { status: 500 });
      }
    }

    return new Response("Hello from Worker!", { status: 200 });
  },
};
