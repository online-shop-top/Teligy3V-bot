export default {
  async fetch(request, env) {
    // –û–±—Ä–æ–±–∫–∞ OPTIONS –∑–∞–ø–∏—Ç—É –¥–ª—è CORS
    if (request.method === "OPTIONS") {
      return new Response(null, {
        headers: { "Access-Control-Allow-Origin": "*" },
      });
    }

    // –û–±—Ä–æ–±–∫–∞ scheduled (cron) –ø–æ–¥—ñ—ó
    if (request.headers.get("CF-Worker-Cron") === "true") {
      await removeInactiveUsers(env);
      return new Response("Cron job completed");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥—É
    if (request.method !== "POST") {
      return new Response("Method Not Allowed", { status: 405 });
    }

    let update;
    try {
      update = await request.json(); // –û–±—Ä–æ–±–∫–∞ JSON –∑ –∑–∞–ø–∏—Ç—É
    } catch (err) {
      console.error("Error parsing JSON:", err);
      return new Response("Invalid JSON", { status: 400 });
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API
    async function sendMessage(chatId, text, reply_markup = null) {
      const body = { chat_id: chatId, text };
      if (reply_markup) body.reply_markup = reply_markup;

      try {
        const resp = await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        });

        if (!resp.ok) {
          throw new Error(`Telegram API error: ${resp.statusText}`);
        }
        const data = await resp.json();
        console.log("Telegram sendMessage response:", data);
      } catch (err) {
        console.error("Error sending message to Telegram:", err);
      }
    }

    const userId = update.message?.from?.id || update.callback_query?.from?.id || update.chat_member?.new_chat_member?.user?.id;
    if (!userId) return new Response("OK");

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await updateUserLastActive(env, userId);

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let userState = await getUserState(env, userId);
    if (!userState) {
      console.log(`No state found for user: ${userId}`);
    }

    // –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ callback'—ñ–≤
    if (update.message?.text === "/start") {
      const firstName = update.message.from.first_name || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";
      await sendMessage(
        userId,
        `üëã –ü—Ä–∏–≤—ñ—Ç, ${firstName}!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏.`,
        { inline_keyboard: [[{ text: "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨", callback_data: "join_request" }]] }
      );
      await setUserState(env, userId, "awaiting_join");
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤
    if (update.callback_query?.data === "join_request") {
      await sendMessage(userId, `–ü–†–ê–í–ò–õ–ê –ß–ê–¢–£ ...`, {
        inline_keyboard: [[{ text: "–ü–û–ì–û–î–ñ–£–Æ–°–¨", callback_data: "rules_accept" }]],
      });
      await setUserState(env, userId, "awaiting_rules_accept");
      return new Response("OK");
    }

    if (update.callback_query?.data === "rules_accept") {
      await sendMessage(userId, "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏.");
      await setUserState(env, userId, "awaiting_apartment");
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏
    if (userState?.step === "awaiting_apartment" && update.message?.text) {
      const aptNum = parseInt(update.message.text.trim(), 10);
      if (isNaN(aptNum) || aptNum < 1 || aptNum > 120) {
        await sendMessage(userId, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      } else {
        let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];
        if (registered.length >= 2) {
          await sendMessage(userId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º—É–º.");
          await clearUserState(env, userId);
        } else {
          await setUserState(env, userId, "awaiting_details", { apartment: aptNum });
          await sendMessage(userId, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É.");
        }
      }
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if (userState?.step === "awaiting_details" && update.message?.text) {
      const parts = update.message.text.trim().split(",").map(s => s.trim());
      if (parts.length < 2 || !parts[0] || !parts[1]) {
        await sendMessage(userId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É.");
        return new Response("OK");
      }
      const [name, phone] = parts;
      const aptNum = userState.apartment;
      let registered = (await env.Teligy3V.get(`apt:${aptNum}`, { type: "json" })) || [];
      if (!registered.find(u => u.userId === userId)) {
        registered.push({ userId, name, phone });
        await env.Teligy3V.put(`apt:${aptNum}`, JSON.stringify(registered));
      }
      const code = Math.floor(1000 + Math.random() * 9000).toString();
      await env.Teligy3V.put(`code:${userId}`, code);
      await setUserState(env, userId, "awaiting_code");
      await sendMessage(userId, `–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
      return new Response("OK");
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if (userState?.step === "awaiting_code" && update.message?.text) {
      const inputCode = update.message.text.trim();
      const savedCode = await env.Teligy3V.get(`code:${userId}`);
      if (inputCode === savedCode) {
        await sendMessage(userId, `–ö–æ–¥ –≤—ñ—Ä–Ω–∏–π! –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏: https://t.me/+6_OJtJfRHSZjZjQy`);
        await setUserState(env, userId, "registered");
        await clearUserState(env, userId);
      } else {
        await sendMessage(userId, `–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
      }
      return new Response("OK");
    }

    return new Response("OK");
  },
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function setUserState(env, userId, step, additionalState = {}) {
  const state = { step, ...additionalState };
  await env.Teligy3V.put(`state:${userId}`, JSON.stringify(state));
}

async function getUserState(env, userId) {
  let userStateRaw = await env.Teligy3V.get(`state:${userId}`);
  let userState = null;
  try {
    userState = userStateRaw ? JSON.parse(userStateRaw) : null;
  } catch {
    userState = null;
  }
  return userState;
}

async function clearUserState(env, userId) {
  await env.Teligy3V.delete(`state:${userId}`);
  await env.Teligy3V.delete(`joined_at:${userId}`);
  await env.Teligy3V.delete(`code:${userId}`);
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function updateUserLastActive(env, userId) {
  await env.Teligy3V.put(`last_active:${userId}`, Date.now().toString());
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è "–Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö" –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function removeInactiveUsers(env) {
  const cutoff = Date.now() - 60000; // 1 —Ö–≤–∏–ª–∏–Ω–∞
  const list = await env.Teligy3V.list({ prefix: "joined_at:" });

  for (const key of list.keys) {
    const userId = key.name.split(":")[1];
    const joinedAtStr = await env.Teligy3V.get(`joined_at:${userId}`);
    const stateRaw = await env.Teligy3V.get(`state:${userId}`);
    if (!joinedAtStr || !stateRaw) continue;
    const joinedAt = Number(joinedAtStr);
    let state;
    try {
      state = JSON.parse(stateRaw);
    } catch {
      continue;
    }
    if (joinedAt < cutoff && (state.step === "not_registered" || !["awaiting_code", "registered"].includes(state.step))) {
      await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/banChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: env.GROUP_CHAT_ID, user_id: Number(userId) }),
      });
      await env.Teligy3V.delete(`joined_at:${userId}`);
      await env.Teligy3V.delete(`state:${userId}`);
      await env.Teligy3V.delete(`code:${userId}`);
    }
  }
}
