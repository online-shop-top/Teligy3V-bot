export default {
  async fetch(request, env) {
    if (request.method === "POST") {
      try {
        const update = await request.json();
        console.log("Incoming:", JSON.stringify(update).slice(0, 500));

        const kv = env.Teligy3V;

        // === –•–µ–ª–ø–µ—Ä: –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
        async function sendMessage(to, text, extra = {}) {
          const url = `https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`;
          const body = { chat_id: to, text, ...extra };
          const resp = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(body),
          });
          const data = await resp.text();
          console.log("Telegram resp:", data.slice(0, 200));
        }

        // === –•–µ–ª–ø–µ—Ä: –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–∞—è–≤–∫—É –∑ —Ç–µ—Ä–º—ñ–Ω–æ–º –¥—ñ—ó ===
        async function savePending(userId, data) {
          // –¥–æ–¥–∞—î–º–æ timestamp –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è
          data.timestamp = Date.now();
          await kv.put(`pending:${userId}`, JSON.stringify(data));
        }

        // === –•–µ–ª–ø–µ—Ä: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó –∑–∞—è–≤–∫–∏ ===
        async function isExpired(pending) {
          const EXPIRATION_MS = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏
          return Date.now() - (pending.timestamp || 0) > EXPIRATION_MS;
        }

        // === –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è (/start join) ===
        if (update.message?.text === "/start join") {
          const chatId = update.message.chat.id;
          const userId = update.message.from.id;

          await kv.delete(`pending:${userId}`);

          const joinButton = {
            reply_markup: {
              inline_keyboard: [[{ text: "üîë –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏", callback_data: "start_join_process" }]],
            },
          };

          await sendMessage(chatId, "–í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è üëá", joinButton);
          return new Response("OK", { status: 200 });
        }

        // === –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É ‚Äú–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è‚Äù ===
        if (update.callback_query?.data === "start_join_process") {
          const userId = update.callback_query.from.id;
          const chatId = userId;

          await savePending(userId, { status: "awaiting_apartment" });
          await sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:");
          return new Response("OK", { status: 200 });
        }

        // === –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
        if (update.message) {
          const msg = update.message;
          const chatId = msg.chat.id;
          const userId = msg.from.id;
          const text = msg.text?.trim() || "";

          let pendingRaw = await kv.get(`pending:${userId}`);
          if (!pendingRaw) {
            await sendMessage(chatId, "–î–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start join");
            return new Response("OK", { status: 200 });
          }

          let pending = JSON.parse(pendingRaw);

          // –Ø–∫—â–æ –∑–∞—è–≤–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
          if (await isExpired(pending)) {
            await kv.delete(`pending:${userId}`);
            await sendMessage(chatId, "‚è∞ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ –º–∏–Ω—É–≤. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start join.");
            return new Response("OK", { status: 200 });
          }

          // 1Ô∏è‚É£ –û—á—ñ–∫—É—î–º–æ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏
          if (pending.status === "awaiting_apartment") {
            pending.apartment = text;
            pending.status = "awaiting_contact";
            await savePending(userId, pending);
            await sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—á–µ—Ä–µ–∑ –∫–æ–º—É):");
            return new Response("OK", { status: 200 });
          }

          // 2Ô∏è‚É£ –û—á—ñ–∫—É—î–º–æ —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
          if (pending.status === "awaiting_contact") {
            const [name, phone] = text.split(",").map((s) => s.trim());
            if (!name || !phone) {
              await sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n–Ü–≤–∞–Ω, 0501234567");
              return new Response("OK", { status: 200 });
            }

            const code = Math.floor(1000 + Math.random() * 9000).toString();
            pending.name = name;
            pending.phone = phone;
            pending.code = code;
            pending.status = "awaiting_code";
            await savePending(userId, pending);

            await sendMessage(
              env.ADMIN_CHAT_ID,
              `üè† –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:\n–Ü–º‚Äô—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–≤–∞—Ä—Ç
