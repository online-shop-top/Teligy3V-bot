export default {
  async fetch(request, env) {
    if (request.method !== "POST") return new Response("OK", { status: 200 });

    const update = await request.json();
    const BOT_TOKEN = env.TG_BOT_TOKEN;
    const ADMIN_ID = 2102040810; // Alex R.
    const BASE_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;
    const KV = env.Teligy3V;

    console.log("Incoming update:", JSON.stringify(update));

    // üß© 1Ô∏è‚É£ –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ —É –≥—Ä—É–ø—ñ
    if (update.message?.new_chat_member) {
      const chatId = update.message.chat.id;
      const user = update.message.new_chat_member;
      const userId = user.id;
      const firstName = user.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

      // –¢–∏–º—á–∞—Å–æ–≤–æ –æ–±–º–µ–∂—É—î–º–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
      await fetch(`${BASE_URL}/restrictChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chatId,
          user_id: userId,
          permissions: {
            can_send_messages: false,
            can_send_media_messages: false,
            can_send_polls: false,
            can_send_other_messages: false,
            can_add_web_page_previews: false
          }
        }),
      });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —É KV
      await KV.put(`user:${userId}`, JSON.stringify({
        status: "pending",
        chatId,
        firstName,
        step: "await_join",
      }));

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨"
      await fetch(`${BASE_URL}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chatId,
          text: `üëã –ü—Ä–∏–≤—ñ—Ç, ${firstName}!\n–©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.`,
          reply_markup: {
            inline_keyboard: [[{ text: "‚úÖ –ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨", callback_data: `join_${userId}` }]]
          }
        }),
      });
      return new Response("OK", { status: 200 });
    }

    // üß© 2Ô∏è‚É£ –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨"
    if (update.callback_query) {
      const cb = update.callback_query;
      const userId = cb.from.id;
      const data = cb.data;

      if (data.startsWith("join_")) {
        await KV.put(`user:${userId}`, JSON.stringify({ status: "collecting", step: "ask_flat" }));

        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
        await fetch(`${BASE_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: userId,
            text: `–ü—Ä–∏–≤—ñ—Ç! üëã\n–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏.`,
          }),
        });

        await fetch(`${BASE_URL}/answerCallbackQuery`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            callback_query_id: cb.id,
            text: "–ë–æ—Ç –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç üì®",
            show_alert: false
          }),
        });
      }
      return new Response("OK", { status: 200 });
    }

    // üß© 3Ô∏è‚É£ –ü—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (update.message && update.message.chat.type === "private") {
      const userId = update.message.from.id;
      const text = update.message.text.trim();
      const userDataRaw = await KV.get(`user:${userId}`);
      let userData = userDataRaw ? JSON.parse(userDataRaw) : null;

      if (!userData) {
        await fetch(`${BASE_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: userId,
            text: "–í–∏ —â–µ –Ω–µ –ø–æ—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –≥—Ä—É–ø—É —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨'.",
          }),
        });
        return new Response("OK", { status: 200 });
      }

      // üè† –ö—Ä–æ–∫ 1: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏
      if (userData.step === "ask_flat") {
        const flat = text;
        const flatUsersRaw = await KV.get(`flat:${flat}`);
        const flatUsers = flatUsersRaw ? JSON.parse(flatUsersRaw) : [];

        if (flatUsers.length >= 2) {
          await fetch(`${BASE_URL}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: userId,
              text: "üö´ –ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            }),
          });
          return new Response("OK", { status: 200 });
        }

        userData.flat = flat;
        userData.step = "ask_name";
        await KV.put(`user:${userId}`, JSON.stringify(userData));

        await fetch(`${BASE_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: userId,
            text: "–í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:",
          }),
        });
        return new Response("OK", { status: 200 });
      }

      // üë§ –ö—Ä–æ–∫ 2: –Ü–º‚Äô—è
      if (userData.step === "ask_name") {
        userData.name = text;
        userData.step = "ask_phone";
        await KV.put(`user:${userId}`, JSON.stringify(userData));

        await fetch(`${BASE_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: userId,
            text: "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
          }),
        });
        return new Response("OK", { status: 200 });
      }

      // üìû –ö—Ä–æ–∫ 3: –¢–µ–ª–µ—Ñ–æ–Ω
      if (userData.step === "ask_phone") {
        userData.phone = text;
        userData.status = "awaiting_code";
        const code = Math.floor(1000 + Math.random() * 9000);
        userData.code = code;
        await KV.put(`user:${userId}`, JSON.stringify(userData));

        // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
        await fetch(`${BASE_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: ADMIN_ID,
            text: `üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\nüë§ ${userData.name}\nüè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${userData.flat}\nüìû ${userData.phone}\nüÜî ${userId}\n–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${code}`,
          }),
        });

        await fetch(`${BASE_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: userId,
            text: "–í–∞—à—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ö–æ–ª–∏ –≤—ñ–Ω —Å–∫–∞–∂–µ –≤–∞–º –∫–æ–¥, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Ç—É—Ç:",
          }),
        });
        return new Response("OK", { status: 200 });
      }

      // ‚úÖ –ö—Ä–æ–∫ 4: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–¥—É
      if (userData.step === "awaiting_code") {
        if (text === String(userData.code)) {
          userData.status = "approved";
          await KV.put(`user:${userId}`, JSON.stringify(userData));

          // –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –∫–≤–∞—Ä—Ç–∏—Ä–∏
          const flatUsersRaw = await KV.get(`flat:${userData.flat}`);
          const flatUsers = flatUsersRaw ? JSON.parse(flatUsersRaw) : [];
          flatUsers.push({ userId, name: userData.name });
          await KV.put(`flat:${userData.flat}`, JSON.stringify(flatUsers));

          // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
          await fetch(`${BASE_URL}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: userId,
              text: "‚úÖ –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –í–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ –≥—Ä—É–ø–∏.",
            }),
          });

          // —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —É—á–∞—Å–Ω–∏–∫–∞ —É –≥—Ä—É–ø—ñ
          await fetch(`${BASE_URL}/restrictChatMember`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: userData.chatId,
              user_id: userId,
              permissions: {
                can_send_messages: true,
                can_send_media_messages: true,
                can_send_polls: true,
                can_send_other_messages: true,
                can_add_web_page_previews: true
              }
            }),
          });
        } else {
          await fetch(`${BASE_URL}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: userId,
              text: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            }),
          });
        }
        return new Response("OK", { status: 200 });
      }
    }

    return new Response("OK", { status: 200 });
  },
};
