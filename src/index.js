export default {
  async fetch(request, env) {
    if (request.method !== 'POST') return new Response('OK');

    const secretHdr = request.headers.get('x-telegram-bot-api-secret-token');
    if (secretHdr !== env.TG_SECRET_TOKEN) return new Response('Forbidden', { status: 403 });

    const update = await request.json().catch(() => null);
    if (!update || !update.message) return new Response('OK');

    const chatId = update.message.chat.id;
    const text = update.message.text?.trim();
    const stateKey = `state_${chatId}`;

    // –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ state –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const state = JSON.parse(await env.USERS.get(stateKey) || '{}');

    let reply = '';

    if (!state.step) {
      reply = '–í—ñ—Ç–∞—é! –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏ (1‚Äì120):';
      state.step = 'flat';
    } else if (state.step === 'flat') {
      const flat = parseInt(text);
      if (isNaN(flat) || flat < 1 || flat > 120) {
        reply = '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏. –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 120:';
      } else {
        state.flat = flat;
        state.step = 'name';
        reply = '‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:';
      }
    } else if (state.step === 'name') {
      state.name = text;
      state.step = 'phone';
      reply = 'üìû –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380501234567):';
    } else if (state.step === 'phone') {
      const phone = text.replace(/\s+/g, '');
      if (!phone.match(/^\+?\d{10,13}$/)) {
        reply = '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:';
      } else {
        state.phone = phone;

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        let usersData = JSON.parse(await env.USERS.get('users') || '{}');
        const flatUsers = usersData[state.flat] || [];

        if (flatUsers.length >= 2) {
          reply = 'üö´ –õ—ñ–º—ñ—Ç: —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ 2 –æ—Å–æ–±–∏.';
        } else {
          flatUsers.push({
            name: state.name,
            phone: state.phone,
            chatId,
            registered: new Date().toISOString()
          });
          usersData[state.flat] = flatUsers;

          await env.USERS.put('users', JSON.stringify(usersData));
          reply = `üéâ –î—è–∫—É—î–º–æ, ${state.name}! –í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä–∏ ‚Ññ${state.flat}.`;
        }

        // –∑–∞–≤–µ—Ä—à–∏–º–æ —Å–µ—Å—ñ—é
        await env.USERS.delete(stateKey);
      }
    }

    // –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    await env.USERS.put(stateKey, JSON.stringify(state));

    // –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text: reply })
    });

    return new Response('OK');
  }
};

