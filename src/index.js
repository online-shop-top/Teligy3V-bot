export default {
  async fetch(request, env) {
    if (request.method === "POST") {
      const update = await request.json();
      console.log("Incoming update:", JSON.stringify(update));

      const api = (method, body) =>
        fetch(`https://api.telegram.org/bot${env.TG_BOT_TOKEN}/${method}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        });

      // ---- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ----
      if (update.message) {
        const msg = update.message;
        const chatId = msg.chat.id;
        const text = msg.text || "";

        // üü¢ –ö—Ä–æ–∫ 1: /start join ‚Äî –ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É ‚Äú‚úÖ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å‚Äù
        if (text === "/start join") {
          await api("sendMessage", {
            chat_id: chatId,
            text: "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ üèòÔ∏è",
            reply_markup: {
              inline_keyboard: [[{ text: "‚úÖ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å", callback_data: "start_join" }]],
            },
          });
          return new Response("OK");
        }

        // üü¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const pending = await env.Teligy3V.get(`user_${chatId}`, { type: "json" });

        // üü† –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏
        if (pending && pending.status === "awaiting_flat") {
          const flat = text.trim();

          // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
          const listKeys = await env.Teligy3V.list({ prefix: "user_" });
          let sameFlatCount = 0;

          for (const k of listKeys.keys) {
            const user = await env.Teligy3V.get(k.name, { type: "json" });
            if (user && user.flat === flat && user.status === "approved") {
              sameFlatCount++;
            }
          }

          // üî¥ –Ø–∫—â–æ –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ —î 2+ –æ—Å—ñ–±
          if (sameFlatCount >= 2) {
            await api("sendMessage", {
              chat_id: chatId,
              text: `‚ùå –ù–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É ‚Ññ${flat} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–µ—à–∫–∞–Ω—Ü—ñ–≤ (2).\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
            });
            await env.Teligy3V.delete(`user_${chatId}`);
            return new Response("OK");
          }

          // ‚úÖ –Ü–Ω–∞–∫—à–µ ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö
          await env.Teligy3V.put(`user_${chatId}`, JSON.stringify({ ...pending, flat, status: "awaiting_name" }));
          await api("sendMessage", { chat_id: chatId, text: "–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:" });
          return new Response("OK");
        }

        // üü† –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
        if (pending && pending.status === "awaiting_name") {
          await env.Teligy3V.put(`user_${chatId}`, JSON.stringify({ ...pending, name: text, status: "awaiting_phone" }));
          await api("sendMessage", { chat_id: chatId, text: "–í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:" });
          return new Response("OK");
        }

        // üü† –í–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Üí –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if (pending && pending.status === "awaiting_phone") {
          const user = { ...pending, phone: text, status: "awaiting_code" };
          const code = Math.floor(1000 + Math.random() * 9000).toString();
          user.code = code;

          await env.Teligy3V.put(`user_${chatId}`, JSON.stringify(user));

          // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
          await api("sendMessage", {
            chat_id: 2102040810, // ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            text: `üë§ –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\nüè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${user.flat}\nüëã –Ü–º‚Äô—è: ${user.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\nüîë –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${code}`,
          });

          await api("sendMessage", {
            chat_id: chatId,
            text: "–û—á—ñ–∫—É—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–≤–µ–¥–∏ –∫–æ–¥, –∫–æ–ª–∏ –æ—Ç—Ä–∏–º–∞—î—à –π–æ–≥–æ.",
          });
          return new Response("OK");
        }

        // üü† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (pending && pending.status === "awaiting_code") {
          if (text === pending.code) {
            await env.Teligy3V.put(`user_${chatId}`, JSON.stringify({ ...pending, status: "approved" }));

            await api("sendMessage", {
              chat_id: chatId,
              text: "‚úÖ –í—ñ—Ç–∞—î–º–æ! –¢–µ–±–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏ üéâ",
            });

            // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É
            await api("sendMessage", {
              chat_id: chatId,
              text: "–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏: https://t.me/your_private_group_link",
            });
          } else {
            await api("sendMessage", { chat_id: chatId, text: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑." });
          }
          return new Response("OK");
        }
      }

      // ---- –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ ----
      if (update.callback_query) {
        const query = update.callback_query;
        const chatId = query.from.id; // –≤–∞–∂–ª–∏–≤–æ! chat.id –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—à–∏–º
        const data = query.data;

        if (data === "start_join") {
          await env.Teligy3V.put(`user_${chatId}`, JSON.stringify({ chatId, status: "awaiting_flat" }));
          await api("sendMessage", { chat_id: chatId, text: "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏:" });
        }

        await api("answerCallbackQuery", { callback_query_id: query.id });
        return new Response("OK");
      }

      return new Response("OK");
    }

    return new Response("Worker is running", { status: 200 });
  },
};
