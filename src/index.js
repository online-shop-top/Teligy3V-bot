export default {
  async fetch(request, env) {
    // –û–±—Ä–æ–±–ª—è—î–º–æ –ª–∏—à–µ POST-–∑–∞–ø–∏—Ç–∏ –≤—ñ–¥ Telegram
    if (request.method === "POST") {
      try {
        const update = await request.json();
        console.log("Incoming update:", JSON.stringify(update).slice(0, 500));

        if (!update.message) return new Response("No message", { status: 200 });

        const chat = update.message.chat;
        const user = update.message.from;
        const chatId = chat.id;
        const userId = user.id;
        const text = update.message.text?.trim() || "";

        const kv = env.Teligy3V;

        // üß© –•–µ–ª–ø–µ—Ä –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        async function sendMessage(to, message) {
          const url = `https://api.telegram.org/bot${env.TG_BOT_TOKEN}/sendMessage`;
          const body = { chat_id: to, text: message };
          const resp = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(body),
          });
          const data = await resp.text();
          console.log("Telegram response:", data.slice(0, 300));
        }

        // üö´ –Ø–∫—â–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (!text) {
          await sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
          return new Response("OK", { status: 200 });
        }

        // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        let pendingData = await kv.get(`pending:${userId}`);
        if (pendingData) pendingData = JSON.parse(pendingData);

        // 1Ô∏è‚É£ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        if (!pendingData) {
          await kv.put(`pending:${userId}`, JSON.stringify({ status: "awaiting_apartment" }));
          await sendMessage(chatId, "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:");
          return new Response("OK", { status: 200 });
        }

        // 2Ô∏è‚É£ –û—á—ñ–∫—É—î–º–æ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏
        if (pendingData.status === "awaiting_apartment") {
          const apartmentNumber = text;
          const existingRaw = await kv.get(`apartment:${apartmentNumber}`);
          const existing = existingRaw ? JSON.parse(existingRaw) : [];

          if (existing.length >= 2) {
            await sendMessage(chatId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            return new Response("OK", { status: 200 });
          }

          pendingData = { status: "awaiting_contact", apartmentNumber };
          await kv.put(`pending:${userId}`, JSON.stringify(pendingData));
          await sendMessage(chatId, "–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—á–µ—Ä–µ–∑ –∫–æ–º—É):");
          return new Response("OK", { status: 200 });
        }

        // 3Ô∏è‚É£ –û—á—ñ–∫—É—î–º–æ —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
        if (pendingData.status === "awaiting_contact") {
          const [name, phone] = text.split(",").map(s => s.trim());
          if (!name || !phone) {
            await sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω, 0501234567");
            return new Response("OK", { status: 200 });
          }

          const code = Math.floor(1000 + Math.random() * 9000).toString();
          pendingData = { status: "awaiting_code", apartmentNumber: pendingData.apartmentNumber, name, phone, code };
          await kv.put(`pending:${userId}`, JSON.stringify(pendingData));

          await sendMessage(env.ADMIN_CHAT_ID, 
            `üè† –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\n–Ü–º‚Äô—è: ${name}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${pendingData.apartmentNumber}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${code}`
          );
          await sendMessage(chatId, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è–∫–∏–π —Ç–æ–±—ñ –ø–æ–≤—ñ–¥–æ–º–∏–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:");
          return new Response("OK", { status: 200 });
        }

        // 4Ô∏è‚É£ –û—á—ñ–∫—É—î–º–æ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (pendingData.status === "awaiting_code") {
          if (text === pendingData.code) {
            pendingData.status = "approved";
            await kv.put(`pending:${userId}`, JSON.stringify(pendingData));

            const apartmentKey = `apartment:${pendingData.apartmentNumber}`;
            const existingRaw = await kv.get(apartmentKey);
            const existing = existingRaw ? JSON.parse(existingRaw) : [];

            existing.push({ userId, name: pendingData.name, phone: pendingData.phone });
            await kv.put(apartmentKey, JSON.stringify(existing));

            await sendMessage(chatId, "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ –≥—Ä—É–ø–∏!");
            return new Response("OK", { status: 200 });
          } else {
            await sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            return new Response("OK", { status: 200 });
          }
        }

        return new Response("OK", { status: 200 });
      } catch (err) {
        console.error("‚ùå Error:", err);
        return new Response("Internal error", { status: 500 });
      }
    }

    // –î–ª—è GET-–∑–∞–ø–∏—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É)
    return new Response("Hello from Worker!", { status: 200 });
  },
};
