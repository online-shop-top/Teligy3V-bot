export default {
  async fetch(request, env) {
    if (request.method !== "POST") {
      return new Response("Hello from Telegram Group Bot!", { status: 200 });
    }

    const update = await request.json();
    const TG_API = `https://api.telegram.org/bot${env.TG_BOT_TOKEN}`;

    // –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    async function sendMessage(chat_id, text, reply_markup) {
      const body = { chat_id, text };
      if (reply_markup) body.reply_markup = reply_markup;
      await fetch(`${TG_API}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
    }

    // –§—É–Ω–∫—Ü—ñ—è –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —á–∞—Ç—ñ
    async function restrictUser(chat_id, user_id) {
      await fetch(`${TG_API}/restrictChatMember`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id,
          user_id,
          permissions: {
            can_send_messages: false,
            can_send_media_messages: false,
            can_send_other_messages: false,
            can_add_web_page_previews: false,
          },
        }),
      });
    }

    if (update.message && update.message.new_chat_members) {
      for (const member of update.message.new_chat_members) {
        const chatId = update.message.chat.id;
        const userId = member.id;
        const firstName = member.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

        // –û–±–º–µ–∂—É—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await restrictUser(chatId, userId);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ pending_users: ID —ñ –¥–∞—Ç–∞ –≤—Ö–æ–¥—É
        const now = new Date().toISOString();
        await env.KV.put(`pending_users:${userId}`, JSON.stringify({ userId, joinedAt: now, status: "pending" }));

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —É –≥—Ä—É–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨"
        const keyboard = {
          inline_keyboard: [[{ text: "–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–¨", callback_data: `join_${userId}` }]],
        };
        await sendMessage(
          chatId,
          `üëã –ü—Ä–∏–≤—ñ—Ç, ${firstName}!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è.`,
          keyboard
        );
      }
    }

    if (update.callback_query) {
      const data = update.callback_query.data;
      const chatId = update.callback_query.message.chat.id;
      const userId = update.callback_query.from.id;

      if (data === `join_${userId}`) {
        let userData = (await env.KV.get(`pending_users:${userId}`, { type: "json" })) || {};
        if (!userData.status || userData.status === "pending") {
          userData.status = "awaiting_apartment";
          await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));

          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ—Ö–∞–Ω–Ω—è–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏
          await sendMessage(userId, "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ (–≤—ñ–¥ 1 –¥–æ 120).");
          
          // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
          await fetch(`${TG_API}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: update.callback_query.id,
              text: "‚úÖ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ.",
              show_alert: false,
            }),
          });

          // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
          await fetch(`${TG_API}/deleteMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: chatId,
              message_id: update.callback_query.message.message_id,
            }),
          });
        }
      }
      return new Response("OK", { status: 200 });
    }

    // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
    if (update.message && update.message.chat.type === "private") {
      const userId = update.message.from.id;
      const text = (update.message.text || "").trim();
      let userData = (await env.KV.get(`pending_users:${userId}`, { type: "json" })) || null;
      if (!userData) {
        return new Response("OK", { status: 200 }); // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î —É pending_users ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
      }

      if (userData.status === "awaiting_apartment") {
        const aptNum = Number(text);
        if (isNaN(aptNum) || aptNum < 1 || aptNum > 120) {
          await sendMessage(userId, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
          return new Response("OK", { status: 200 });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö
        const residents = (await env.KV.get(`apartments:${aptNum}`, { type: "json" })) || [];
        if (residents.length >= 2) {
          await sendMessage(userId, "–ù–∞ —Ü—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
          return new Response("OK", { status: 200 });
        }

        userData.status = "awaiting_name_phone";
        userData.apartment = aptNum;
        await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));
        await sendMessage(userId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω");
        return new Response("OK", { status: 200 });
      }

      if (userData.status === "awaiting_name_phone") {
        const parts = text.split(",").map(s => s.trim());
        if (parts.length < 2) {
          await sendMessage(userId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω");
          return new Response("OK", { status: 200 });
        }
        const [name, phone] = parts;
        userData.name = name;
        userData.phone = phone;

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminCode = Math.floor(1000 + Math.random() * 9000);
        userData.admin_code = adminCode;
        userData.status = "awaiting_code";
        await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const adminId = Number(env.ADMIN_CHAT_ID);
        await sendMessage(adminId, `–ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫:\n–Ü–º'—è: ${name}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${userData.apartment}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${adminCode}`);

        await sendMessage(userId, "–í–∞—à—ñ –¥–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í–≤–µ–¥—ñ—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.");
        return new Response("OK", { status: 200 });
      }

      if (userData.status === "awaiting_code") {
        if (text === String(userData.admin_code)) {
          userData.status = "approved";
          // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ø–∏—Å–æ–∫ –º–µ—à–∫–∞–Ω—Ü—ñ–≤ –∫–≤–∞—Ä—Ç–∏—Ä–∏
          const residents = (await env.KV.get(`apartments:${userData.apartment}`, { type: "json" })) || [];
          residents.push(userId);
          await env.KV.put(`apartments:${userData.apartment}`, JSON.stringify(residents));
          await env.KV.put(`pending_users:${userId}`, JSON.stringify(userData));

          // –ó–Ω—ñ–º–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          await fetch(`${TG_API}/restrictChatMember`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: userData.chat_id || null,
              user_id: userId,
              permissions: {
                can_send_messages: true,
                can_send_media_messages: true,
                can_send_polls: true,
                can_send_other_messages: true,
                can_add_web_page_previews: true,
                can_invite_users: true,
              },
            }),
          });

          await sendMessage(userId, "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ –≥—Ä—É–ø–∏!");
        } else {
          await sendMessage(userId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
        return new Response("OK", { status: 200 });
      }
    }

    return new Response("OK", { status: 200 });
  },
};
